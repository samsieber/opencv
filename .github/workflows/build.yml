# https://github.com/marketplace/actions/run-on-architecture
# https://github.com/openpnp/opencv/pull/56
# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstrategymatrix
# https://github.com/openpnp/opencv/actions
# https://github.com/openpnp/opencv/pull/59/files
# https://stackoverflow.com/questions/57498605/github-actions-share-workspace-artifacts-between-jobs?rq=1
# https://github.com/actions/upload-artifact
# https://github.com/actions/download-artifact

# TODO
# - maybe consider doing an arm64 test with run on?
# - see if I can remove more hardcoded paths and such using the matrix variables.

name: Build OpenPnP OpenCV Distribution

on: 
  push:
  pull_request:

jobs:
  # Build native libraries for Linux and Mac. Uploads the libraries
  # as artifacts which are used in subsequent jobs.
  build_mac_linux_x64:
    strategy:
      matrix:
        os: [ubuntu-18.04]
        java: [8]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Setup JDK ${{ matrix.java }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}

      - name: Get Version Info
        run: |
          echo "POM_VERSION=$(mvn build-helper:parse-version org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV
          echo "OPENCV_VERSION=$(mvn build-helper:parse-version org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=opencv.version.long -q -DforceStdout)" >> $GITHUB_ENV
          echo "OPENCV_VERSION_SHORT=$(mvn build-helper:parse-version org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=opencv.version.short -q -DforceStdout)" >> $GITHUB_ENV

      - name: Build OpenCV
        run: |
          export CXXFLAGS="-include `pwd`/shim/force_link_glibc_2.17.h"
          wget https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip > /dev/null
          unzip ${{ env.OPENCV_VERSION }} > /dev/null
          cd opencv-${{ env.OPENCV_VERSION }}
          mkdir build
          cd build
          cmake \
            -D OPENCV_FORCE_3RDPARTY_BUILD=ON \
            -D BUILD_JAVA=ON \
            -D BUILD_FAT_JAVA_LIB=ON \
            -D OPENCV_ENABLE_NONFREE=ON \
            -D BUILD_SHARED_LIBS=OFF \
            -D BUILD_PERF_TESTS=OFF \
            -D BUILD_TESTS=OFF \
            -D BUILD_EXAMPLES=OFF \
            -D BUILD_DOCS=OFF \
            -D BUILD_PACKAGE=OFF \
            -D BUILD_opencv_python2=OFF \
            -D BUILD_opencv_python3=OFF \
            -D BUILD_opencv_apps=OFF \
            -D BUILD_opencv_gapi=OFF \
            -D CMAKE_BUILD_TYPE=RELEASE \
            ..
          make -j8

      - name: Copy Libraries
        run: |
          cp opencv-${{ env.OPENCV_VERSION }}/build/bin/opencv-${{ env.OPENCV_VERSION_SHORT }}.jar upstream || :
          cp opencv-${{ env.OPENCV_VERSION }}/build/lib/libopencv_java${{ env.OPENCV_VERSION_SHORT }}.so src/main/resources/nu/pattern/opencv/linux/x86_64 || :
          cp opencv-${{ env.OPENCV_VERSION }}/build/lib/libopencv_java${{ env.OPENCV_VERSION_SHORT }}.dylib src/main/resources/nu/pattern/opencv/osx/x86_64 || :

      - name: Build with Maven
        run: mvn -B test

      - name: Upload Libraries
        uses: actions/upload-artifact@v2
        with: 
          name: ${{ matrix.os }}
          path: |
            opencv-${{ env.OPENCV_VERSION }}/build/bin/opencv-${{ env.OPENCV_VERSION_SHORT }}.jar
            opencv-${{ env.OPENCV_VERSION }}/build/lib/libopencv_java${{ env.OPENCV_VERSION_SHORT }}.so
            opencv-${{ env.OPENCV_VERSION }}/build/lib/libopencv_java${{ env.OPENCV_VERSION_SHORT }}.dylib
